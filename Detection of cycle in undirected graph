/*
ArrayList<ArrayList<Integer>> g: represent graph containing 'V' number of
                                    vertices and edges between them
V: represent number of vertices
*/
class DetectCycle{
   {
    static boolean isCyclic(ArrayList<ArrayList<Integer>> g, int V)
    {
       // add your code here
       boolean[] v=new boolean[V];
       for(int i=0;i<V;i++){
            if(!v[i]){
                
          if(isCyclicUtil(i,v,g,-1))
          return true;
         
           }
        }
        return false;
    }
    
    static boolean  isCyclicUtil(int i,boolean[] v,ArrayList<ArrayList<Integer>> g,int parent){
        Iterator<Integer> al=g.get(i).iterator();
        v[i]=true;
        int z;
        while(al.hasNext()){
            z=al.next();
            if(!v[z]){
               // v[z]=true;
                if(isCyclicUtil(z,v,g,i)){
                    return true;
                }
            }else if(z!=parent){
                return true;
            }
        }
        return false;
    }
}
}
